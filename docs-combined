// Ghost Pilot Technical Documentation - CSS + HTML Content
const docsCSS = `
body{margin:0!important;padding:0!important}
.docs-page{max-width:1400px;margin:80px auto;padding:20px;position:relative;z-index:999}
.docs-badge{display:inline-flex;align-items:center;gap:8px;background-color:rgba(99,102,241,0.1);border:1px solid rgba(99,102,241,0.3);border-radius:20px;padding:6px 16px;margin-bottom:16px;font-size:12px;font-weight:500;color:#a5b4fc;text-transform:uppercase;letter-spacing:1px;animation:badgeEntry 0.8s cubic-bezier(0.25,0.46,0.45,0.94) 0.1s both;position:relative;z-index:1000}
.docs-badge-dot{width:6px;height:6px;border-radius:50%;background-color:#6366f1;animation:spin 3s linear infinite}
.docs-title{font-size:3rem;font-weight:800;background:linear-gradient(135deg,#fff 0%,#6366f1 50%,#8b5cf6 100%);-webkit-background-clip:text;-webkit-text-fill-color:transparent;text-align:center;margin-bottom:40px;position:relative;z-index:1000}
.docs-subtitle{font-size:1.2rem;color:#94a3b8;font-weight:400;margin:0 0 40px 0;opacity:0.8;text-align:center;position:relative;z-index:1000}

/* Table of Contents */
.toc-section{margin:40px 0;position:relative;z-index:1000}
.toc-title{font-size:1.8rem;font-weight:700;color:#fff;margin-bottom:20px;text-align:center}
.toc-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:20px;margin:30px 0}
.toc-item{background:linear-gradient(135deg,rgba(15,23,42,0.6),rgba(30,41,59,0.3));backdrop-filter:blur(10px);border:1px solid rgba(99,102,241,0.1);border-radius:16px;padding:20px;transition:all 0.3s ease;cursor:pointer;text-decoration:none;display:block}
.toc-item:hover{transform:translateY(-5px);border-color:rgba(99,102,241,0.4);box-shadow:0 15px 30px rgba(99,102,241,0.15)}
.toc-item-title{color:#fff;font-size:1.1rem;font-weight:600;margin-bottom:8px}
.toc-item-desc{color:#cbd5e1;font-size:0.9rem;line-height:1.4}
.toc-item-icon{width:24px;height:24px;margin-bottom:12px;color:#6366f1}

/* Documentation Sections */
.docs-section{background:linear-gradient(135deg,rgba(15,23,42,0.6),rgba(30,41,59,0.3));backdrop-filter:blur(10px);border:1px solid rgba(99,102,241,0.1);border-radius:20px;padding:30px;margin-bottom:40px;transition:all 0.3s ease;position:relative;z-index:1000}
.docs-section:hover{transform:translateY(-5px);border-color:rgba(99,102,241,0.3);box-shadow:0 20px 40px rgba(99,102,241,0.1)}
.docs-section h2{color:#fff;font-size:1.8rem;font-weight:700;margin-bottom:20px;position:relative;padding-left:20px;z-index:1001}
.docs-section h2::before{content:'';position:absolute;left:0;top:50%;transform:translateY(-50%);width:4px;height:20px;background:linear-gradient(135deg,#6366f1,#8b5cf6);border-radius:2px;z-index:1002}
.docs-section h3{color:#8b5cf6;font-size:1.3rem;font-weight:600;margin:25px 0 15px 0;position:relative;z-index:1001}
.docs-section h4{color:#a5b4fc;font-size:1.1rem;font-weight:600;margin:20px 0 10px 0;position:relative;z-index:1001}
.docs-section p{color:#cbd5e1;font-size:1rem;line-height:1.7;margin-bottom:15px;position:relative;z-index:1001}
.docs-section ul{list-style:none;padding:0;margin:15px 0;position:relative;z-index:1001}
.docs-section li{color:#cbd5e1;font-size:1rem;margin-bottom:10px;padding-left:25px;position:relative;line-height:1.6;z-index:1001}
.docs-section li::before{content:'→';position:absolute;left:0;color:#6366f1;font-weight:bold;z-index:1002}
.docs-section strong{color:#fff;font-weight:600;position:relative;z-index:1001}
.docs-section code{background:rgba(99,102,241,0.1);color:#a5b4fc;padding:2px 6px;border-radius:4px;font-family:'Fira Code',monospace;font-size:0.9rem}
.docs-section pre{background:rgba(15,23,42,0.8);border:1px solid rgba(99,102,241,0.2);border-radius:8px;padding:20px;margin:15px 0;overflow-x:auto;position:relative;z-index:1001}
.docs-section pre code{background:none;color:#e2e8f0;padding:0;font-size:0.85rem;line-height:1.5}

/* Special Section Types */
.docs-section.architecture{border-color:rgba(34,197,94,0.3);background:linear-gradient(135deg,rgba(15,23,42,0.6),rgba(6,78,59,0.2))}
.docs-section.architecture h2::before{background:linear-gradient(135deg,#22c55e,#16a34a)}
.docs-section.ai-system{border-color:rgba(245,158,11,0.3);background:linear-gradient(135deg,rgba(15,23,42,0.6),rgba(92,57,0,0.2))}
.docs-section.ai-system h2::before{background:linear-gradient(135deg,#f59e0b,#d97706)}
.docs-section.stealth{border-color:rgba(168,85,247,0.3);background:linear-gradient(135deg,rgba(15,23,42,0.6),rgba(88,28,135,0.2))}
.docs-section.stealth h2::before{background:linear-gradient(135deg,#a855f7,#9333ea)}
.docs-section.deployment{border-color:rgba(239,68,68,0.3);background:linear-gradient(135deg,rgba(15,23,42,0.6),rgba(127,29,29,0.2))}
.docs-section.deployment h2::before{background:linear-gradient(135deg,#ef4444,#dc2626)}

/* Code Blocks with Syntax Highlighting */
.code-block{background:rgba(15,23,42,0.9);border:1px solid rgba(99,102,241,0.3);border-radius:12px;padding:20px;margin:20px 0;position:relative;overflow:hidden}
.code-header{display:flex;align-items:center;justify-content:space-between;margin-bottom:15px;padding-bottom:10px;border-bottom:1px solid rgba(99,102,241,0.2)}
.code-language{color:#6366f1;font-weight:600;font-size:0.8rem;text-transform:uppercase;letter-spacing:1px}
.code-copy{background:rgba(99,102,241,0.1);border:1px solid rgba(99,102,241,0.3);color:#a5b4fc;padding:4px 8px;border-radius:6px;font-size:0.75rem;cursor:pointer;transition:all 0.2s ease}
.code-copy:hover{background:rgba(99,102,241,0.2);border-color:rgba(99,102,241,0.5)}
.code-content{color:#e2e8f0;font-family:'Fira Code',monospace;font-size:0.85rem;line-height:1.6;white-space:pre-wrap;word-break:break-word}

/* Architecture Diagrams */
.architecture-diagram{background:rgba(15,23,42,0.4);border:2px dashed rgba(99,102,241,0.3);border-radius:12px;padding:30px;margin:30px 0;text-align:center;position:relative}
.diagram-title{color:#fff;font-size:1.2rem;font-weight:600;margin-bottom:20px}
.diagram-flow{display:flex;align-items:center;justify-content:center;gap:15px;flex-wrap:wrap}
.diagram-box{background:linear-gradient(135deg,rgba(99,102,241,0.2),rgba(139,92,246,0.1));border:1px solid rgba(99,102,241,0.4);border-radius:8px;padding:12px 20px;color:#fff;font-weight:500;min-width:120px;text-align:center}
.diagram-arrow{color:#6366f1;font-size:1.5rem;font-weight:bold}

/* Feature Highlights */
.feature-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(250px,1fr));gap:20px;margin:30px 0}
.feature-card{background:rgba(99,102,241,0.05);border:1px solid rgba(99,102,241,0.2);border-radius:12px;padding:20px;transition:all 0.3s ease}
.feature-card:hover{transform:translateY(-3px);border-color:rgba(99,102,241,0.4);background:rgba(99,102,241,0.1)}
.feature-icon{width:32px;height:32px;color:#6366f1;margin-bottom:12px}
.feature-title{color:#fff;font-size:1.1rem;font-weight:600;margin-bottom:8px}
.feature-desc{color:#cbd5e1;font-size:0.9rem;line-height:1.5}

/* Metrics and Stats */
.metrics-grid{display:grid;grid-template-columns:repeat(auto-fit,minmax(200px,1fr));gap:20px;margin:30px 0}
.metric-card{background:rgba(34,197,94,0.1);border:1px solid rgba(34,197,94,0.3);border-radius:12px;padding:20px;text-align:center}
.metric-value{color:#22c55e;font-size:2rem;font-weight:800;line-height:1}
.metric-label{color:#cbd5e1;font-size:0.9rem;margin-top:5px;text-transform:uppercase;letter-spacing:1px}

/* API Reference */
.api-method{background:rgba(15,23,42,0.6);border:1px solid rgba(99,102,241,0.2);border-radius:8px;padding:20px;margin:15px 0}
.api-signature{background:rgba(99,102,241,0.1);color:#a5b4fc;padding:10px 15px;border-radius:6px;font-family:'Fira Code',monospace;font-size:0.9rem;margin-bottom:15px}
.api-params{margin:15px 0}
.api-param{display:flex;gap:15px;margin:8px 0;align-items:baseline}
.api-param-name{color:#6366f1;font-weight:600;min-width:100px}
.api-param-type{color:#8b5cf6;font-size:0.85rem;background:rgba(139,92,246,0.1);padding:2px 6px;border-radius:4px}
.api-param-desc{color:#cbd5e1;flex:1}

/* Navigation */
.docs-nav{position:fixed;top:20px;right:20px;background:rgba(15,23,42,0.9);backdrop-filter:blur(10px);border:1px solid rgba(99,102,241,0.3);border-radius:12px;padding:15px;z-index:10000;max-width:200px}
.docs-nav h4{color:#fff;font-size:0.9rem;font-weight:600;margin:0 0 10px 0}
.docs-nav ul{list-style:none;padding:0;margin:0}
.docs-nav li{margin:5px 0}
.docs-nav a{color:#a5b4fc;text-decoration:none;font-size:0.8rem;transition:color 0.2s ease}
.docs-nav a:hover{color:#fff}

/* Back to Home Button */
.back-home-container{text-align:center;margin:60px auto 40px;position:relative;z-index:1000}
.back-home-btn{display:inline-flex;align-items:center;gap:10px;background:linear-gradient(135deg,rgba(99,102,241,0.1),rgba(139,92,246,0.05));border:1px solid rgba(99,102,241,0.3);border-radius:50px;padding:14px 28px;font-size:16px;font-weight:600;color:#fff;text-decoration:none;transition:all 0.3s ease;cursor:pointer;position:relative;overflow:hidden}
.back-home-btn:hover{transform:translateY(-2px);border-color:rgba(99,102,241,0.6);box-shadow:0 10px 30px rgba(99,102,241,0.3);background:linear-gradient(135deg,rgba(99,102,241,0.2),rgba(139,92,246,0.1))}
.back-home-btn::before{content:'';position:absolute;top:50%;left:-100%;width:100%;height:100%;background:linear-gradient(90deg,transparent,rgba(255,255,255,0.2),transparent);transform:translateY(-50%);transition:left 0.6s ease}
.back-home-btn:hover::before{left:100%}
.back-home-btn svg{width:20px;height:20px;transition:transform 0.3s ease}
.back-home-btn:hover svg{transform:translateX(-3px)}

/* Footer Styles */
.footer{position:relative;background-color:transparent;border-top:1px solid rgba(255,255,255,0.1);font-family:Inter,-apple-system,BlinkMacSystemFont,sans-serif;opacity:0.3;visibility:visible;transition:all 0.6s cubic-bezier(0.25,0.46,0.45,0.94);transform:scale(0.95) translateY(20px);animation:containerEntry 1.2s cubic-bezier(0.25,0.46,0.45,0.94) forwards;margin-top:80px}
.footer-content{max-width:1400px;margin:0 auto;padding:28px 40px}
.footer-row{display:flex;justify-content:center;align-items:center;flex-wrap:nowrap;gap:40px;animation:fadeInUp 0.8s cubic-bezier(0.25,0.46,0.45,0.94) 0.2s both}
.footer-copyright{display:flex;align-items:center;white-space:nowrap}
.footer-copyright span{font-size:14px;font-weight:400;color:rgba(255,255,255,0.6);letter-spacing:-0.01em}
.footer-nav{display:flex;gap:32px;align-items:center;flex-wrap:nowrap;white-space:nowrap}
.footer-nav a{font-size:14px;color:rgba(255,255,255,0.6);text-decoration:none;transition:color 0.3s ease;cursor:pointer}
.footer-nav a:hover{color:#ffffff}
.footer-right{display:flex;align-items:center;gap:32px}
.footer-legal{display:flex;gap:24px;align-items:center;white-space:nowrap}
.footer-legal a{font-size:14px;color:rgba(255,255,255,0.6);text-decoration:none;transition:color 0.3s ease;cursor:pointer;font-family:inherit}
.footer-legal a:hover{color:#ffffff}
.footer-social{display:flex;gap:12px;align-items:center}
.footer-social a{width:32px;height:32px;border-radius:6px;background-color:rgba(255,255,255,0.05);display:flex;align-items:center;justify-content:center;color:rgba(255,255,255,0.6);transition:all 0.3s ease;cursor:pointer}
.footer-social a:hover{background-color:rgba(255,255,255,0.1);color:#ffffff}
.footer-social svg{width:16px;height:16px}
.footer-separator{color:rgba(255,255,255,0.2);font-size:18px;line-height:1;margin:0 8px}

@media(max-width:1200px){
  .footer-nav{gap:24px}
  .footer-row{gap:30px}
  .toc-grid{grid-template-columns:repeat(auto-fit,minmax(250px,1fr))}
  .feature-grid{grid-template-columns:repeat(auto-fit,minmax(220px,1fr))}
}

@media(max-width:1000px){
  .footer-nav{display:none}
  .docs-nav{position:relative;top:auto;right:auto;margin:20px 0;max-width:none}
}

@media(max-width:768px){
  .docs-page{padding:15px;margin:60px auto}
  .docs-title{font-size:2rem}
  .docs-section{padding:20px}
  .toc-grid{grid-template-columns:1fr;gap:15px}
  .feature-grid{grid-template-columns:1fr}
  .metrics-grid{grid-template-columns:repeat(auto-fit,minmax(150px,1fr))}
  .footer-row{flex-direction:column;text-align:center;gap:20px}
  .footer-nav{display:flex;flex-wrap:wrap;justify-content:center;gap:16px}
  .footer-right{flex-direction:column;gap:20px}
  .footer-separator{display:none}
  .back-home-btn{font-size:14px;padding:12px 24px}
  .diagram-flow{flex-direction:column;gap:10px}
  .diagram-box{min-width:auto;width:100%}
}

@keyframes containerEntry{from{opacity:0;transform:translateY(30px) scale(0.95)}to{opacity:1;transform:translateY(0) scale(1)}}
@keyframes fadeInUp{from{opacity:0;transform:translateY(20px)}to{opacity:1;transform:translateY(0)}}
@keyframes badgeEntry{from{opacity:0;transform:translateY(-20px)}to{opacity:1;transform:translateY(0)}}
@keyframes spin{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}
`;

const docsHTML = `
<div class="docs-page">
  <!-- Navigation -->
  <div class="docs-nav">
    <h4>Navigation</h4>
    <ul>
      <li><a href="#overview">Overview</a></li>
      <li><a href="#architecture">Architecture</a></li>
      <li><a href="#ai-system">AI System</a></li>
      <li><a href="#stealth">Stealth Technology</a></li>
      <li><a href="#licensing">Licensing</a></li>
      <li><a href="#processing">Processing Flow</a></li>
      <li><a href="#deployment">Deployment</a></li>
      <li><a href="#api">API Reference</a></li>
      <li><a href="#scaling">Scaling</a></li>
    </ul>
  </div>

  <div style="text-align: center;">
    <div class="docs-badge">
      <div class="docs-badge-dot"></div>
      Ghost Pilot Documentation
    </div>
  </div>
  <h1 class="docs-title">Technical Documentation</h1>
  <p class="docs-subtitle">Complete technical guide to Ghost Pilot's architecture, AI systems, and deployment</p>
  
  <!-- Table of Contents -->
  <div class="toc-section" id="overview">
    <h2 class="toc-title">Documentation Sections</h2>
    <div class="toc-grid">
      <a href="#architecture" class="toc-item">
        <svg class="toc-item-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
        </svg>
        <div class="toc-item-title">System Architecture</div>
        <div class="toc-item-desc">Core architecture, service patterns, and component interactions</div>
      </a>

      <a href="#ai-system" class="toc-item">
        <svg class="toc-item-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
        </svg>
        <div class="toc-item-title">AI System</div>
        <div class="toc-item-desc">Unlimited AI access via Puter.js, model management, and processing</div>
      </a>

      <a href="#stealth" class="toc-item">
        <svg class="toc-item-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
        </svg>
        <div class="toc-item-title">Stealth Technology</div>
        <div class="toc-item-desc">Advanced stealth, detection avoidance, and platform invisibility</div>
      </a>

      <a href="#licensing" class="toc-item">
        <svg class="toc-item-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.031 9-11.622 0-1.042-.133-2.052-.382-3.016z"/>
        </svg>
        <div class="toc-item-title">Licensing System</div>
        <div class="toc-item-desc">Multi-tier licensing, usage tracking, and hybrid validation</div>
      </a>

      <a href="#processing" class="toc-item">
        <svg class="toc-item-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"/>
        </svg>
        <div class="toc-item-title">Processing Flow</div>
        <div class="toc-item-desc">Screenshot analysis, question classification, and solution generation</div>
      </a>

      <a href="#deployment" class="toc-item">
        <svg class="toc-item-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01"/>
        </svg>
        <div class="toc-item-title">Deployment</div>
        <div class="toc-item-desc">Cross-platform building, packaging, and distribution</div>
      </a>
    </div>
  </div>

  <!-- System Architecture -->
  <div class="docs-section architecture" id="architecture">
    <h2>🏗️ System Architecture</h2>
    
    <h3>Core Architecture Overview</h3>
    <p>Ghost Pilot is built as an <strong>Electron-based desktop application</strong> with a sophisticated service-oriented architecture designed for stealth operation and unlimited AI access.</p>

    <div class="architecture-diagram">
      <div class="diagram-title">Application Architecture Flow</div>
      <div class="diagram-flow">
        <div class="diagram-box">React Frontend</div>
        <div class="diagram-arrow">→</div>
        <div class="diagram-box">Electron Main Process</div>
        <div class="diagram-arrow">→</div>
        <div class="diagram-box">Service Registry</div>
        <div class="diagram-arrow">→</div>
        <div class="diagram-box">Processing Orchestrator</div>
        <div class="diagram-arrow">→</div>
        <div class="diagram-box">AI Providers</div>
      </div>
    </div>

    <h3>Key Architectural Components</h3>
    <div class="feature-grid">
      <div class="feature-card">
        <svg class="feature-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z"/>
        </svg>
        <div class="feature-title">Electron Framework</div>
        <div class="feature-desc">Cross-platform desktop app with Node.js backend and Chromium frontend</div>
      </div>

      <div class="feature-card">
        <svg class="feature-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"/>
        </svg>
        <div class="feature-title">Service Registry</div>
        <div class="feature-desc">Dependency injection container managing all services and components</div>
      </div>

      <div class="feature-card">
        <svg class="feature-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4"/>
        </svg>
        <div class="feature-title">Database Layer</div>
        <div class="feature-desc">SQLite for local data, Supabase for cloud sync, localStorage for caching</div>
      </div>

      <div class="feature-card">
        <svg class="feature-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
        </svg>
        <div class="feature-title">Security Layer</div>
        <div class="feature-desc">Advanced stealth, input validation, and secure data handling</div>
      </div>
    </div>

    <h3>Application State Management</h3>
    <div class="code-block">
      <div class="code-header">
        <div class="code-language">TypeScript Interface</div>
        <div class="code-copy">Copy</div>
      </div>
      <div class="code-content">// Core Application State Structure
interface ApplicationState {
  // Window management
  mainWindow: BrowserWindow | null
  isWindowVisible: boolean
  isWindowInteractive: boolean
  windowPosition: { x: number; y: number } | null
  
  // Processing state
  view: "queue" | "solutions" | "debug" | "mcq" | "gk" | "chat"
  isProcessingActive: boolean
  currentAbortController: AbortController | null
  
  // Services
  screenshotHelper: ScreenshotHelper | null
  processingHelper: ProcessingOrchestratorAdapter | null
  shortcutsHelper: ShortcutsHelper | null
}</div>
    </div>

    <h3>Service Dependencies</h3>
    <p>The application uses a sophisticated dependency injection pattern to manage service lifecycles and dependencies:</p>
    <ul>
      <li><strong>DependencyContainer:</strong> Central IoC container managing all services</li>
      <li><strong>ServiceRegistry:</strong> Registers and initializes processing services</li>
      <li><strong>ResourceManager:</strong> Manages memory, AbortControllers, and cleanup</li>
      <li><strong>ProcessingOrchestrator:</strong> Coordinates complex processing workflows</li>
    </ul>
  </div>

  <!-- AI System -->
  <div class="docs-section ai-system" id="ai-system">
    <h2>🤖 AI System Architecture</h2>
    
    <h3>Unlimited AI Access Strategy</h3>
    <p>Ghost Pilot achieves <strong>unlimited AI access</strong> through an innovative approach using <strong>Puter.js</strong> as the primary AI gateway, completely bypassing traditional API costs.</p>

    <div class="architecture-diagram">
      <div class="diagram-title">AI Provider Architecture</div>
      <div class="diagram-flow">
        <div class="diagram-box">User Request</div>
        <div class="diagram-arrow">→</div>
        <div class="diagram-box">PuterHelper</div>
        <div class="diagram-arrow">→</div>
        <div class="diagram-box">Puter.js</div>
        <div class="diagram-arrow">→</div>
        <div class="diagram-box">OpenRouter</div>
        <div class="diagram-arrow">→</div>
        <div class="diagram-box">AI Models</div>
      </div>
    </div>

    <h3>PuterHelper: The Core AI Engine</h3>
    <p>The <code>PuterHelper</code> class manages all AI interactions with automatic retry logic and usage limit recovery:</p>

    <div class="code-block">
      <div class="code-header">
        <div class="code-language">TypeScript</div>
        <div class="code-copy">Copy</div>
      </div>
      <div class="code-content">// Core PuterHelper functionality
export class PuterHelper {
  private mainWindow: BrowserWindow | null = null;
  private usageLimitPatterns = [
    /usage.*limit/i,
    /rate.*limit/i,
    /quota.*exceeded/i,
    /too.*many.*requests/i
  ];

  // Automatic retry with surgical data clearing
  private async executePuterWithRetry<T>(
    operation: () => Promise<T>,
    operationName: string
  ): Promise<T> {
    for (let attempt = 1; attempt <= 3; attempt++) {
      try {
        const result = await operation();
        if (this.isUsageLimitError(result)) {
          await this.surgicalPuterClear();
          continue; // Retry after clearing
        }
        return result;
      } catch (error) {
        if (attempt === 3) throw error;
      }
    }
  }
}</div>
    </div>

    <h3>AI Model Configuration</h3>
    <p>Ghost Pilot supports multiple premium AI models through a unified configuration system:</p>

    <div class="feature-grid">
      <div class="feature-card">
        <div class="feature-title">OpenAI Models</div>
        <div class="feature-desc">O3, GPT-4o, O1-Pro, O1-Mini via OpenRouter</div>
      </div>
      <div class="feature-card">
        <div class="feature-title">Anthropic Models</div>
        <div class="feature-desc">Claude Opus 4, Claude Sonnet 4</div>
      </div>
      <div class="feature-card">
        <div class="feature-title">Google Models</div>
        <div class="feature-desc">Gemini 2.0 Flash, Gemini Pro</div>
      </div>
      <div class="feature-card">
        <div class="feature-title">Other Models</div>
        <div class="feature-desc">Qwen 2.5 VL 72B, and more via OpenRouter</div>
      </div>
    </div>

    <h3>Model Selection Strategy</h3>
    <div class="code-block">
      <div class="code-header">
        <div class="code-language">TypeScript Configuration</div>
        <div class="code-copy">Copy</div>
      </div>
      <div class="code-content">// Model configuration with validation
private sanitizeModelSelection(model: string, provider: string): string {
  const allowedModels = {
    openai: [
      'openrouter:openai/o3',
      'openrouter:openai/gpt-4o', 
      'openrouter:openai/o1-pro',
      'openrouter:openai/o1-mini'
    ],
    anthropic: [
      'openrouter:anthropic/claude-opus-4',
      'openrouter:anthropic/claude-sonnet-4'
    ],
    google: [
      'openrouter:google/gemini-2.0-flash',
      'openrouter:google/gemini-pro'
    ]
  };
  
  if (!allowedModels[provider]?.includes(model)) {
    return 'openrouter:openai/o3'; // Default to O3
  }
  return model;
}</div>
    </div>

    <h3>AI Processing Flow</h3>
    <p>The AI system follows a sophisticated processing pipeline:</p>
    <ul>
      <li><strong>Screenshot Analysis:</strong> Vision models analyze screenshots for question classification</li>
      <li><strong>Question Classification:</strong> AI categorizes questions (MCQ, Coding, Fill-in-blank, etc.)</li>
      <li><strong>Model Selection:</strong> Dynamic model selection based on task requirements</li>
      <li><strong>Solution Generation:</strong> Specialized processors for different question types</li>
      <li><strong>Response Streaming:</strong> Real-time response streaming to the UI</li>
    </ul>

    <div class="metrics-grid">
      <div class="metric-card">
        <div class="metric-value">∞</div>
        <div class="metric-label">Daily AI Requests</div>
      </div>
      <div class="metric-card">
        <div class="metric-value">12+</div>
        <div class="metric-label">AI Models Supported</div>
      </div>
      <div class="metric-card">
        <div class="metric-value">0%</div>
        <div class="metric-label">API Costs</div>
      </div>
      <div class="metric-card">
        <div class="metric-value">99.9%</div>
        <div class="metric-label">Uptime</div>
      </div>
    </div>
  </div>

  <!-- Stealth Technology -->
  <div class="docs-section stealth" id="stealth">
    <h2>🕵️ Advanced Stealth Technology</h2>
    
    <h3>Absolute Stealth - 12/12 Platform Invisibility</h3>
    <p>Ghost Pilot employs cutting-edge <strong>Advanced Stealth Manager</strong> technology achieving <strong>99.9% undetected rate</strong> across 12+ major platforms including Zoom, Teams, HackerRank, CodeSignal, and proctoring software.</p>

    <div class="feature-grid">
      <div class="feature-card">
        <svg class="feature-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
        </svg>
        <div class="feature-title">AI Detection Avoidance</div>
        <div class="feature-desc">Behavioral pattern randomization and AI model confusion techniques</div>
      </div>

      <div class="feature-card">
        <svg class="feature-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9l3 3-3 3m13 0h-6m-2-5h6m2 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2h10a2 2 0 002-2v-3"/>
        </svg>
        <div class="feature-title">Behavioral Camouflage</div>
        <div class="feature-desc">Human activity simulation and system process mimicry</div>
      </div>

      <div class="feature-card">
        <svg class="feature-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z"/>
        </svg>
        <div class="feature-title">Memory Obfuscation</div>
        <div class="feature-desc">Dynamic memory patterns and signature scrambling</div>
      </div>

      <div class="feature-card">
        <svg class="feature-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"/>
        </svg>
        <div class="feature-title">Network Stealth</div>
        <div class="feature-desc">Traffic obfuscation and legitimate request mixing</div>
      </div>

      <div class="feature-card">
        <svg class="feature-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.031 9-11.622 0-1.042-.133-2.052-.382-3.016z"/>
        </svg>
        <div class="feature-title">Kernel-Level Hiding</div>
        <div class="feature-desc">System service spoofing and priority class manipulation</div>
      </div>

      <div class="feature-card">
        <svg class="feature-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"/>
        </svg>
        <div class="feature-title">Anti-Forensics</div>
        <div class="feature-desc">Trace elimination and memory encryption</div>
      </div>
    </div>

    <h3>Stealth Implementation</h3>
    <div class="code-block">
      <div class="code-header">
        <div class="code-language">TypeScript</div>
        <div class="code-copy">Copy</div>
      </div>
      <div class="code-content">// Advanced Stealth Manager Configuration
export interface AdvancedStealthConfig {
  enableAIDetectionAvoidance: boolean;
  enableBehavioralCamouflage: boolean;
  enableMemoryObfuscation: boolean;
  enableNetworkStealth: boolean;
  enableAdvancedProcessHiding: boolean;
  enableKernelLevelStealth: boolean;
  enableAntiForensics: boolean;
  stealthLevel: 'maximum' | 'extreme' | 'absolute';
}

// Platform-specific stealth activation
public async enableAbsoluteStealth(): Promise<void> {
  // Step 1: AI Detection Avoidance
  await this.enableAIDetectionAvoidance();
  
  // Step 2: Behavioral Camouflage
  await this.enableBehavioralCamouflage();
  
  // Step 3: Memory Signature Obfuscation
  await this.enableMemoryObfuscation();
  
  // Step 4: Network Traffic Stealth
  await this.enableNetworkStealth();
  
  // Step 5: Kernel-Level Process Hiding
  await this.enableKernelLevelStealth();
  
  // Step 6: Anti-Forensics Measures
  await this.enableAntiForensics();
}</div>
    </div>

    <h3>Platform Compatibility</h3>
    <div class="metrics-grid">
      <div class="metric-card">
        <div class="metric-value">12+</div>
        <div class="metric-label">Platforms Supported</div>
      </div>
      <div class="metric-card">
        <div class="metric-value">99.9%</div>
        <div class="metric-label">Undetected Rate</div>
      </div>
      <div class="metric-card">
        <div class="metric-value">&lt;0.5s</div>
        <div class="metric-label">Detection Response</div>
      </div>
      <div class="metric-card">
        <div class="metric-value">&lt;2%</div>
        <div class="metric-label">CPU Overhead</div>
      </div>
    </div>

    <h3>Supported Platforms</h3>
    <ul>
      <li><strong>Video Conferencing:</strong> Zoom, Microsoft Teams, Google Meet, Amazon Chime</li>
      <li><strong>Coding Platforms:</strong> HackerRank, CodeSignal, LeetCode, CodePad</li>
      <li><strong>Proctoring Software:</strong> Proctorio, Examity, Respondus LockDown, HonorLock</li>
      <li><strong>Learning Platforms:</strong> Canvas, Blackboard, Moodle, Coursera</li>
    </ul>
  </div>

  <!-- Licensing System -->
  <div class="docs-section" id="licensing">
    <h2>🔐 Multi-Tier Licensing System</h2>
    
    <h3>Licensing Architecture</h3>
    <p>Ghost Pilot implements a sophisticated <strong>hybrid licensing system</strong> with multiple storage backends and real-time validation.</p>

    <div class="architecture-diagram">
      <div class="diagram-title">Licensing System Architecture</div>
      <div class="diagram-flow">
        <div class="diagram-box">User Action</div>
        <div class="diagram-arrow">→</div>
        <div class="diagram-box">Auth License Sync</div>
        <div class="diagram-arrow">→</div>
        <div class="diagram-box">Supabase Cloud</div>
        <div class="diagram-arrow">↕</div>
        <div class="diagram-box">SQLite Local</div>
        <div class="diagram-arrow">↕</div>
        <div class="diagram-box">localStorage Cache</div>
      </div>
    </div>

    <h3>License Tiers</h3>
    <div class="feature-grid">
      <div class="feature-card">
        <div class="feature-title">FREE Tier</div>
        <div class="feature-desc">3 screenshots/day, 3 AI requests/day, GPT-4o Mini access, basic stealth</div>
      </div>
      <div class="feature-card">
        <div class="feature-title">PRO Tier - $19.99/month</div>
        <div class="feature-desc">100 screenshots/day, 100 AI requests/day, premium models, advanced stealth</div>
      </div>
      <div class="feature-card">
        <div class="feature-title">ULTRA Tier - $99.99/month</div>
        <div class="feature-desc">Unlimited usage (-1), all premium models, maximum stealth, API access</div>
      </div>
    </div>

    <h3>Usage Tracking Implementation</h3>
    <div class="code-block">
      <div class="code-header">
        <div class="code-language">SQL</div>
        <div class="code-copy">Copy</div>
      </div>
      <div class="code-content">-- Real-time usage tracking with automatic reset
CREATE OR REPLACE FUNCTION record_usage_and_check_limit(
  p_user_id UUID,
  p_action TEXT  -- 'screenshot' or 'inputRequest'
)
RETURNS TABLE (
  allowed BOOLEAN,
  remaining INTEGER,
  limit_reached BOOLEAN,
  current_used INTEGER,
  daily_limit INTEGER,
  reset_time TIMESTAMPTZ
) AS $$
BEGIN
  -- Reset daily usage if needed
  PERFORM reset_daily_usage_if_needed();
  
  -- Check if unlimited (ULTRA only)
  IF license_record.daily_ai_request_limit = -1 THEN
    RETURN QUERY SELECT 
      TRUE as allowed,
      -1 as remaining,  -- -1 means unlimited
      FALSE as limit_reached,
      new_used_count as current_used,
      -1 as daily_limit,
      license_record.usage_reset_time as reset_time;
    RETURN;
  END IF;
  
  -- Standard tier limit checking...
END;
$$ LANGUAGE plpgsql;</div>
    </div>

    <h3>License Validation</h3>
    <p>The system implements multiple validation layers:</p>
    <ul>
      <li><strong>Machine ID Binding:</strong> Licenses tied to specific hardware fingerprints</li>
      <li><strong>Cloud Validation:</strong> Real-time server-side license verification</li>
      <li><strong>Offline Grace Period:</strong> 7-day offline operation for paid tiers</li>
      <li><strong>Automatic Downgrades:</strong> Expired licenses automatically downgrade to FREE</li>
      <li><strong>Device Transfers:</strong> Limited device transfers per year</li>
    </ul>

    <h3>Hybrid Storage Strategy</h3>
    <div class="code-block">
      <div class="code-header">
        <div class="code-language">TypeScript</div>
        <div class="code-copy">Copy</div>
      </div>
      <div class="code-content">// Multi-storage license management
interface LicenseInfo {
  userId: string;
  tier: UserTier;
  machineId: string;
  activatedAt: Date;
  expiresAt: Date | null;
  usageToday: {
    screenshots: number;
    inputRequests: number;
    date: string;
  };
  isValid: boolean;
  features: string[];
  transfersRemaining: number;
}

// Storage priority: Supabase → SQLite → localStorage
async function getCurrentLicense(): Promise<LicenseInfo | null> {
  try {
    // Try cloud first
    const cloudLicense = await this.fetchUserLicenseFromCloud(userId);
    if (cloudLicense) return cloudLicense;
    
    // Fallback to local database
    const dbLicense = databaseManager.getUserLicense(userId);
    if (dbLicense) return this.convertDbToLicenseInfo(dbLicense);
    
    // Final fallback to localStorage
    const cachedLicense = localStorage.getItem('license');
    return cachedLicense ? JSON.parse(cachedLicense) : null;
  } catch (error) {
    // Auto-create FREE license on any failure
    return await this.initializeFreeAccount(userId);
  }
}</div>
    </div>
  </div>

  <!-- Processing Flow -->
  <div class="docs-section" id="processing">
    <h2>⚙️ Processing Orchestration</h2>
    
    <h3>Processing Pipeline Overview</h3>
    <p>Ghost Pilot employs a sophisticated <strong>Processing Orchestrator</strong> that coordinates screenshot analysis, question classification, and solution generation through specialized processors.</p>

    <div class="architecture-diagram">
      <div class="diagram-title">Processing Flow</div>
      <div class="diagram-flow">
        <div class="diagram-box">Screenshot Capture</div>
        <div class="diagram-arrow">→</div>
        <div class="diagram-box">AI Vision Analysis</div>
        <div class="diagram-arrow">→</div>
        <div class="diagram-box">Question Classification</div>
        <div class="diagram-arrow">→</div>
        <div class="diagram-box">Specialized Processor</div>
        <div class="diagram-arrow">→</div>
        <div class="diagram-box">Solution Generation</div>
      </div>
    </div>

    <h3>Question Classification System</h3>
    <div class="feature-grid">
      <div class="feature-card">
        <div class="feature-title">CODING_PROBLEM</div>
        <div class="feature-desc">LeetCode-style algorithms requiring complete code solutions</div>
      </div>
      <div class="feature-card">
        <div class="feature-title">MULTIPLE_CHOICE</div>
        <div class="feature-desc">Questions with A, B, C, D options requiring single answer</div>
      </div>
      <div class="feature-card">
        <div class="feature-title">FILL_IN_BLANK</div>
        <div class="feature-desc">Partial code with specific blanks to complete</div>
      </div>
      <div class="feature-card">
        <div class="feature-title">GENERAL_KNOWLEDGE</div>
        <div class="feature-desc">Factual questions without specific format requirements</div>
      </div>
    </div>

    <h3>Processing Orchestrator Implementation</h3>
    <div class="code-block">
      <div class="code-header">
        <div class="code-language">TypeScript</div>
        <div class="code-copy">Copy</div>
      </div>
      <div class="code-content">export class ProcessingOrchestrator implements IProcessingOrchestrator {
  async processScreenshots(request: ProcessingRequest): Promise<ProcessingResult> {
    // Step 1: Validate screenshots
    const validatedScreenshots = await this.screenshotProcessor
      .validateScreenshots(request.screenshots);
    
    // Step 2: AI-powered question classification
    const classificationResult = await this.classifyQuestions(
      validatedScreenshots, signal
    );
    
    // Step 3: Route to specialized processors
    await this.processClassifiedQuestions(
      classificationResult.questions, signal, request.mainWindow
    );
    
    return {
      success: true,
      questions: classificationResult.questions,
      data: { processedQuestions: classificationResult.questions.length }
    };
  }

  async processClassifiedQuestions(questions: any[], signal: AbortSignal) {
    const questionTypes = questions.map(q => q.question_type);
    const hasCodingProblems = questionTypes.includes("CODING_PROBLEM");
    const hasMultipleChoice = questionTypes.includes("MULTIPLE_CHOICE");
    
    if (hasCodingProblems) {
      await this.processCodingQuestions(questions, signal, mainWindow);
    } else if (hasMultipleChoice) {
      await this.processMultipleChoiceQuestions(questions, signal, mainWindow);
    }
    // ... other question types
  }
}</div>
    </div>

    <h3>AI-Powered Question Classification</h3>
    <div class="code-block">
      <div class="code-header">
        <div class="code-language">Classification Prompt</div>
        <div class="code-copy">Copy</div>
      </div>
      <div class="code-content">// AI classification prompt for vision models
const classificationPrompt = `
CRITICAL: You MUST respond with ONLY a valid JSON array.

Analyze this screenshot and identify ALL questions present. 
For each question, determine its type and extract relevant information.

QUESTION TYPES TO DETECT:
1. CODING_PROBLEM: LeetCode-style algorithmic problems
   - Keywords: "implement function", "algorithm", "time complexity"
   
2. MULTIPLE_CHOICE: Questions with options A, B, C, D
   - HIGHEST PRIORITY: If you see labeled answer choices
   
3. FILL_IN_BLANK: Questions asking to complete existing code
   - Keywords: "complete the code", "fill in the blank"

RESPONSE FORMAT:
[
  {
    "question_number": 1,
    "question_type": "CODING_PROBLEM|MULTIPLE_CHOICE|FILL_IN_BLANK",
    "confidence_score": 0.95,
    "question_text": "The full question text",
    "additional_data": {
      // Type-specific data structure
    }
  }
]`;</div>
    </div>

    <h3>Specialized Processors</h3>
    <ul>
      <li><strong>CodingProcessor:</strong> Handles algorithmic problems with step-by-step solutions</li>
      <li><strong>MCQProcessor:</strong> Analyzes multiple choice questions with option explanations</li>
      <li><strong>ScreenshotProcessor:</strong> Manages image analysis and question extraction</li>
      <li><strong>ConversationMemory:</strong> Maintains context-aware chat interactions</li>
    </ul>
  </div>

  <!-- Deployment -->
  <div class="docs-section deployment" id="deployment">
    <h2>🚀 Cross-Platform Deployment</h2>
    
    <h3>Build System Overview</h3>
    <p>Ghost Pilot uses <strong>Electron Builder</strong> with <strong>Vite</strong> for fast, optimized builds across Windows, macOS, and Linux platforms.</p>

    <div class="feature-grid">
      <div class="feature-card">
        <svg class="feature-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 002-2M9 7a2 2 0 012 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 002-2"/>
        </svg>
        <div class="feature-title">Windows</div>
        <div class="feature-desc">NSIS installer and portable EXE with code signing</div>
      </div>

      <div class="feature-card">
        <svg class="feature-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z"/>
        </svg>
        <div class="feature-title">macOS</div>
        <div class="feature-desc">DMG and ZIP for Intel and Apple Silicon with notarization</div>
      </div>

      <div class="feature-card">
        <svg class="feature-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z"/>
        </svg>
        <div class="feature-title">Linux</div>
        <div class="feature-desc">AppImage for universal Linux distribution</div>
      </div>
    </div>

    <h3>Build Configuration</h3>
    <div class="code-block">
      <div class="code-header">
        <div class="code-language">package.json</div>
        <div class="code-copy">Copy</div>
      </div>
      <div class="code-content">{
  "build": {
    "appId": "com.chunginlee.ghostpilot",
    "productName": "Ghost Pilot",
    "asar": true,
    "compression": "maximum",
    "win": {
      "target": [
        { "target": "nsis", "arch": ["x64"] },
        { "target": "portable", "arch": ["x64"] }
      ],
      "requestedExecutionLevel": "asInvoker",
      "signAndEditExecutable": false
    },
    "mac": {
      "target": [
        { "target": "dmg", "arch": ["x64", "arm64"] },
        { "target": "zip", "arch": ["x64", "arm64"] }
      ],
      "hardenedRuntime": true,
      "notarize": true
    },
    "linux": {
      "target": ["AppImage"],
      "icon": "assets/icons/png/icon-256x256.png"
    }
  }
}</div>
    </div>

    <h3>Native Dependencies</h3>
    <p>Ghost Pilot handles native dependencies like <strong>better-sqlite3</strong> with special build configurations:</p>

    <div class="code-block">
      <div class="code-header">
        <div class="code-language">Batch Script</div>
        <div class="code-copy">Copy</div>
      </div>
      <div class="code-content">REM SQLite3 build configuration
echo "Building with native dependencies..."
npx electron-builder install-app-deps

REM Create config with native modules
echo {
echo   "asar": false,
echo   "extraFiles": [
echo     {
echo       "from": "node_modules/better-sqlite3",
echo       "to": "node_modules/better-sqlite3"
echo     }
echo   ]
echo } > temp-builder-config.json

npx electron-builder build --config temp-builder-config.json</code>
    </div>

    <h3>CI/CD Pipeline</h3>
    <p>Automated building and deployment through GitHub Actions:</p>
    <ul>
      <li><strong>Multi-platform builds:</strong> Windows, macOS (Intel + ARM), Linux</li>
      <li><strong>Code signing:</strong> Windows Authenticode and macOS Developer ID</li>
      <li><strong>Automated releases:</strong> GitHub Releases with checksums</li>
      <li><strong>Auto-updater:</strong> Built-in update checking and installation</li>
    </ul>

    <h3>Deployment Metrics</h3>
    <div class="metrics-grid">
      <div class="metric-card">
        <div class="metric-value">3</div>
        <div class="metric-label">Platforms</div>
      </div>
      <div class="metric-card">
        <div class="metric-value">~50MB</div>
        <div class="metric-label">App Size</div>
      </div>
      <div class="metric-card">
        <div class="metric-value">&lt;30s</div>
        <div class="metric-label">Build Time</div>
      </div>
      <div class="metric-card">
        <div class="metric-value">100%</div>
        <div class="metric-label">Automated</div>
      </div>
    </div>
  </div>

  <!-- API Reference -->
  <div class="docs-section" id="api">
    <h2>📋 API Reference</h2>
    
    <h3>Core IPC Methods</h3>
    <p>Ghost Pilot exposes a comprehensive API through Electron's IPC system:</p>

    <div class="api-method">
      <div class="api-signature">window.electronAPI.takeScreenshot(): Promise&lt;ScreenshotData&gt;</div>
      <p>Captures a screenshot and returns base64 image data with metadata.</p>
      <div class="api-params">
        <div class="api-param">
          <div class="api-param-name">Returns</div>
          <div class="api-param-type">Promise&lt;ScreenshotData&gt;</div>
          <div class="api-param-desc">Screenshot data with preview and metadata</div>
        </div>
      </div>
    </div>

    <div class="api-method">
      <div class="api-signature">window.electronAPI.processScreenshots(): Promise&lt;ProcessingResult&gt;</div>
      <p>Processes queued screenshots through the AI analysis pipeline.</p>
      <div class="api-params">
        <div class="api-param">
          <div class="api-param-name">Returns</div>
          <div class="api-param-type">Promise&lt;ProcessingResult&gt;</div>
          <div class="api-param-desc">Processing result with detected questions and solutions</div>
        </div>
      </div>
    </div>

    <div class="api-method">
      <div class="api-signature">window.electronAPI.processChatMessage(message: string): Promise&lt;ChatResult&gt;</div>
      <p>Sends a chat message to the AI system for processing.</p>
      <div class="api-params">
        <div class="api-param">
          <div class="api-param-name">message</div>
          <div class="api-param-type">string</div>
          <div class="api-param-desc">User message to process</div>
        </div>
        <div class="api-param">
          <div class="api-param-name">Returns</div>
          <div class="api-param-type">Promise&lt;ChatResult&gt;</div>
          <div class="api-param-desc">AI response with streaming support</div>
        </div>
      </div>
    </div>

    <h3>License Management API</h3>
    <div class="api-method">
      <div class="api-signature">window.electronAPI.checkLicenseUsage(action: 'screenshot' | 'inputRequest'): Promise&lt;UsageResult&gt;</div>
      <p>Checks if user can perform an action based on current license limits.</p>
    </div>

    <h3>Stealth Control API</h3>
    <div class="api-method">
      <div class="api-signature">window.electronAPI.advancedStealth.enable(): Promise&lt;void&gt;</div>
      <p>Enables absolute stealth mode with all 12/12 platform compatibility.</p>
    </div>

    <h3>Event Listeners</h3>
    <div class="code-block">
      <div class="code-header">
        <div class="code-language">TypeScript</div>
        <div class="code-copy">Copy</div>
      </div>
      <div class="code-content">// Event listener examples
window.electronAPI.onSolutionSuccess((data) => {
  console.log('Solution generated:', data);
});

window.electronAPI.onMCQDetected((mcqData) => {
  console.log('Multiple choice question detected:', mcqData);
});

window.electronAPI.onStealthActivated(() => {
  console.log('Stealth mode activated');
});</div>
    </div>
  </div>

  <!-- Scaling -->
  <div class="docs-section" id="scaling">
    <h2>📈 Performance & Scaling</h2>
    
    <h3>Performance Optimizations</h3>
    <div class="feature-grid">
      <div class="feature-card">
        <div class="feature-title">Memory Management</div>
        <div class="feature-desc">Resource manager with automatic cleanup and memory pooling</div>
      </div>
      <div class="feature-card">
        <div class="feature-title">Caching Strategy</div>
        <div class="feature-desc">Multi-layer caching with TTL and invalidation policies</div>
      </div>
      <div class="feature-card">
        <div class="feature-title">Lazy Loading</div>
        <div class="feature-desc">Component and service lazy initialization for faster startup</div>
      </div>
      <div class="feature-card">
        <div class="feature-title">Stream Processing</div>
        <div class="feature-desc">Real-time response streaming for better user experience</div>
      </div>
    </div>

    <h3>Scalability Features</h3>
    <ul>
      <li><strong>Service Registry:</strong> Dependency injection for modular architecture</li>
      <li><strong>Processing Orchestrator:</strong> Handles complex workflows efficiently</li>
      <li><strong>Resource Manager:</strong> Prevents memory leaks and manages resources</li>
      <li><strong>Abort Controllers:</strong> Cancellable operations for better UX</li>
      <li><strong>Rate Limiting:</strong> Prevents API abuse and ensures stability</li>
    </ul>

    <h3>Performance Metrics</h3>
    <div class="metrics-grid">
      <div class="metric-card">
        <div class="metric-value">&lt;3s</div>
        <div class="metric-label">App Startup</div>
      </div>
      <div class="metric-card">
        <div class="metric-value">&lt;2s</div>
        <div class="metric-label">Screenshot Analysis</div>
      </div>
      <div class="metric-card">
        <div class="metric-value">&lt;100MB</div>
        <div class="metric-label">Memory Usage</div>
      </div>
      <div class="metric-card">
        <div class="metric-value">&lt;5%</div>
        <div class="metric-label">CPU Usage</div>
      </div>
    </div>
  </div>

  <!-- Back to Home Button -->
  <div class="back-home-container">
    <a href="/" class="back-home-btn">
      <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M19 12H5M12 19l-7-7 7-7"/>
      </svg>
      Back to Home
    </a>
  </div>
</div>

<!-- Footer -->
<footer class="footer" data-card-stack>
  <div class="footer-content">
    <div class="footer-row">
      <!-- Left Side - Copyright -->
      <div class="footer-copyright">
        <span>© Ghost Pilot 2025</span>
      </div>

      <span class="footer-separator">·</span>

      <!-- Center - Navigation Links -->
      <div class="footer-nav">
        <a href="#features">Features</a>
        <a href="/pricing">Pricing</a>
        <a href="#ai-models">AI Models</a>
        <a href="#help">Help Center</a>
        <a href="#docs">Documentation</a>
        <a href="#community">Community</a>
      </div>

      <span class="footer-separator">·</span>

      <!-- Right Side - Legal & Social -->
      <div class="footer-right">
        <!-- Legal Links -->
        <div class="footer-legal">
          <a href="/privacy-policy">Privacy</a>
          <a href="/terms-of-service">Terms</a>
        </div>

        <span class="footer-separator">·</span>

        <!-- Social Links -->
        <div class="footer-social">
          <a href="https://twitter.com/ghostpilot" target="_blank" rel="noopener noreferrer" aria-label="Twitter">
            <svg viewBox="0 0 24 24" fill="currentColor">
              <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
            </svg>
          </a>
          <a href="https://github.com/ghostpilot" target="_blank" rel="noopener noreferrer" aria-label="GitHub">
            <svg viewBox="0 0 24 24" fill="currentColor">
              <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
            </svg>
          </a>
          <a href="https://discord.gg/ghostpilot" target="_blank" rel="noopener noreferrer" aria-label="Discord">
            <svg viewBox="0 0 24 24" fill="currentColor">
              <path d="M20.317 4.3698a19.7913 19.7913 0 00-4.8851-1.5152.0741.0741 0 00-.0785.0371c-.211.3753-.4447.8648-.6083 1.2495-1.8447-.2762-3.68-.2762-5.4868 0-.1636-.3933-.4058-.8742-.6177-1.2495a.077.077 0 00-.0785-.037 19.7363 19.7363 0 00-4.8852 1.515.0699.0699 0 00-.0321.0277C.5334 9.0458-.319 13.5799.0992 18.0578a.0824.0824 0 00.0312.0561c2.0528 1.5076 4.0413 2.4228 5.9929 3.0294a.0777.0777 0 00.0842-.0276c.4616-.6304.8731-1.2952 1.226-1.9942a.076.076 0 00-.0416-.1057c-.6528-.2476-1.2743-.5495-1.8722-.8923a.077.077 0 01-.0076-.1277c.1258-.0943.2517-.1923.3718-.2914a.0743.0743 0 01.0776-.0105c3.9278 1.7933 8.18 1.7933 12.0614 0a.0739.0739 0 01.0785.0095c.1202.099.246.1981.3728.2924a.077.077 0 01-.0066.1276 12.2986 12.2986 0 01-1.873.8914.0766.0766 0 00-.0407.1067c.3604.698.7719 1.3628 1.225 1.9932a.076.076 0 00.0842.0286c1.961-.6067 3.9495-1.5219 6.0023-3.0294a.077.077 0 00.0313-.0552c.5004-5.177-.8382-9.6739-3.5485-13.6604a.061.061 0 00-.0312-.0286zM8.02 15.3312c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9555-2.4189 2.157-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419-.0188 1.3332-.9555 2.4189-2.1569 2.4189zm7.9748 0c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9554-2.4189 2.1569-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.9554 2.4189-2.1568 2.4189Z"/>
            </svg>
          </a>
        </div>
      </div>
    </div>
  </div>
</footer>
`;

// Auto-execute function to inject CSS and HTML
(function() {
  // Add CSS
  const style = document.createElement('style');
  style.textContent = docsCSS;
  document.head.appendChild(style);
  
  // Add HTML when DOM is ready - find main content area
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', function() {
      initializeDocsPage();
    });
  } else {
    initializeDocsPage();
  }
  
  function initializeDocsPage() {
    // Try to find main content area, otherwise use body
    const mainContent = document.querySelector('main') || 
                       document.querySelector('.main-content') || 
                       document.querySelector('[data-framer-name="Content"]') ||
                       document.querySelector('.framer-page-content') ||
                       document.body;
    
    // Clear existing content in main area and add documentation
    if (mainContent !== document.body) {
      mainContent.innerHTML = docsHTML;
    } else {
      // If we're using body, insert at the beginning but after header
      const header = document.querySelector('header') || document.querySelector('nav');
      if (header) {
        header.insertAdjacentHTML('afterend', docsHTML);
      } else {
        document.body.insertAdjacentHTML('afterbegin', docsHTML);
      }
    }
    
    // Initialize smooth scrolling for navigation links
    initializeSmoothScrolling();
    
    // Initialize footer scroll animation
    initializeFooterAnimation();
  }
  
  function initializeSmoothScrolling() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
          target.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
        }
      });
    });
  }
  
  function initializeFooterAnimation() {
    const handleScroll = () => {
      const cards = document.querySelectorAll("[data-card-stack]");
      
      cards.forEach((card) => {
        const rect = card.getBoundingClientRect();
        const windowHeight = window.innerHeight;
        const cardTop = rect.top;
        const cardHeight = rect.height;
        
        // Calculate progress based on scroll position
        const progress = Math.max(
          0,
          Math.min(
            1,
            (windowHeight - cardTop) / (windowHeight + cardHeight)
          )
        );
        
        // Apply stacking effect
        if (progress > 0 && progress < 1) {
          const scale = 0.95 + progress * 0.05;
          const translateY = (1 - progress) * 20;
          const opacity = 0.3 + progress * 0.7;
          
          card.style.transform = `scale(${scale}) translateY(${translateY}px)`;
          card.style.opacity = opacity.toString();
        } else if (progress >= 1) {
          card.style.transform = "scale(1) translateY(0px)";
          card.style.opacity = "1";
        } else {
          card.style.transform = "scale(0.95) translateY(20px)";
          card.style.opacity = "0.3";
        }
      });
    };
    
    window.addEventListener("scroll", handleScroll);
    handleScroll(); // Initial call
  }
})();
